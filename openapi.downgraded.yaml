components:
  parameters:
    timeout:
      name: timeout
      in: query
      description: Timeout in milliseconds. 0 means no timeout.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
  schemas:
    Database:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://example.com/schemas/Database.json
          format: uri
          readOnly: true
          type: string
        id:
          type: string
        name:
          type: string
        number_of_stacks:
          format: int64
          type: integer
      required:
        - id
        - name
        - number_of_stacks
      type: object
    DatabasesOutputBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://example.com/schemas/DatabasesOutputBody.json
          format: uri
          readOnly: true
          type: string
        databases:
          items:
            $ref: "#/components/schemas/Database"
          nullable: true
          type: array
        number_of_databases:
          format: int64
          type: integer
      required:
        - databases
        - number_of_databases
      type: object
    ErrorDetail:
      additionalProperties: false
      properties:
        location:
          description: Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
          type: string
        message:
          description: Error message text
          type: string
        value:
          description: The value at the given location
      type: object
    ErrorModel:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://example.com/schemas/ErrorModel.json
          format: uri
          readOnly: true
          type: string
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          example: Property foo is required but is missing.
          type: string
        errors:
          description: Optional list of individual error details
          items:
            $ref: "#/components/schemas/ErrorDetail"
          nullable: true
          type: array
        instance:
          description: A URI reference that identifies the specific occurrence of the problem.
          example: https://example.com/error-log/abc123
          format: uri
          type: string
        status:
          description: HTTP status code
          example: 400
          format: int64
          type: integer
        title:
          description: A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
          example: Bad Request
          type: string
        type:
          default: about:blank
          description: A URI reference to human-readable documentation for the error.
          example: https://example.com/errors/example
          format: uri
          type: string
      type: object
    PopDatabaseStackElementOutputBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://example.com/schemas/PopDatabaseStackElementOutputBody.json
          format: uri
          readOnly: true
          type: string
        element: {}
      required:
        - element
      type: object
    PushDatabaseStackElementInputBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://example.com/schemas/PushDatabaseStackElementInputBody.json
          format: uri
          readOnly: true
          type: string
        element: {}
      required:
        - element
      type: object
    Stack:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://example.com/schemas/Stack.json
          format: uri
          readOnly: true
          type: string
        created_at:
          format: date-time
          type: string
        id:
          type: string
        name:
          type: string
        peek: {}
        read_at:
          format: date-time
          type: string
        size:
          format: int64
          type: integer
        updated_at:
          format: date-time
          type: string
      required:
        - created_at
        - updated_at
        - read_at
        - peek
        - id
        - name
        - size
      type: object
    StackElementBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://example.com/schemas/StackElementBody.json
          format: uri
          readOnly: true
          type: string
        element: {}
      required:
        - element
      type: object
    StacksOutputBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://example.com/schemas/StacksOutputBody.json
          format: uri
          readOnly: true
          type: string
        stacks: {}
      required:
        - stacks
      type: object
    StatusBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://example.com/schemas/StatusBody.json
          format: uri
          readOnly: true
          type: string
        go_version:
          type: string
        host:
          type: string
        memory_alloc:
          type: string
        number_goroutines:
          format: int64
          type: integer
        pid:
          format: int64
          type: integer
        running_for:
          format: double
          type: number
        started_at:
          format: date-time
          type: string
        status:
          type: string
        version:
          type: string
      required:
        - started_at
        - status
        - version
        - go_version
        - host
        - memory_alloc
        - running_for
        - pid
        - number_goroutines
      type: object
    BatchOperation:
      additionalProperties: false
      properties:
        type:
          type: string
          description: Type of operation to perform.
          enum: [push, pop, peek, flush]
        database:
          type: string
          description: Database ID or name.
        stack:
          type: string
          description: Stack ID or name.
        element:
          description: Element data for push operations.
      required:
        - type
        - database
        - stack
      type: object
    BatchOperationsInputBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://example.com/schemas/BatchOperationsInputBody.json
          format: uri
          readOnly: true
          type: string
        operations:
          type: array
          items:
            $ref: "#/components/schemas/BatchOperation"
      required:
        - operations
      type: object
    BatchOperationResult:
      additionalProperties: false
      properties:
        status:
          type: integer
          description: HTTP status code of the individual operation.
        result:
          description: Result of the operation, if successful.
        error:
          description: Error message if the operation failed.
      required:
        - status
      type: object
    BatchOperationsOutputBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://example.com/schemas/BatchOperationsOutputBody.json
          format: uri
          readOnly: true
          type: string
        results:
          type: array
          items:
            $ref: "#/components/schemas/BatchOperationResult"
      required:
        - results
      type: object
info:
  contact:
    email: jacob.hochstetler@gmail.com
    name: Jacob Hochstetler
    url: https://github.com/jh125486
  description: A simple in-memory stack database.
  title: BatterDB
  version: 1.0.0
openapi: 3.0.3
paths:
  /_ping:
    get:
      description: Sends a ping to the server, that will answer pong if it is running.
      operationId: get-ping
      responses:
        "200":
          content:
            application/json:
              schema:
                format: base64
                type: string
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Ping
      tags:
        - Main
  /_status:
    get:
      description: Show server status.
      operationId: get-status
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusBody"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Status
      tags:
        - Main
  /databases:
    get:
      description: Show databases.
      operationId: get-databases
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabasesOutputBody"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Databases
      tags:
        - Databases
    post:
      description: Create a database.
      operationId: post-database
      parameters:
        - explode: false
          in: query
          name: name
          required: true
          schema:
            minLength: 7
            type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Database"
          description: Created
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Create
      tags:
        - Databases
  /databases/{database}:
    delete:
      description: Delete a database.
      operationId: delete-database
      parameters:
        - description: can be the database ID or name
          in: path
          name: database
          required: true
          schema:
            description: can be the database ID or name
            type: string
      responses:
        "204":
          description: No Content
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Delete
      tags:
        - Databases
    get:
      description: Show a database.
      operationId: get-database
      parameters:
        - description: can be the database ID or name
          in: path
          name: database
          required: true
          schema:
            description: can be the database ID or name
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Database"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Database
      tags:
        - Databases
  /databases/{database}/stacks:
    get:
      description: Show stacks of a database.
      operationId: get-stacks
      parameters:
        - description: can be the database ID or name
          in: path
          name: database
          required: true
          schema:
            description: can be the database ID or name
            type: string
        - explode: false
          in: query
          name: kv
          schema:
            default: false
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StacksOutputBody"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Stacks
      tags:
        - Stacks
    post:
      description: Create a stack from a database.
      operationId: create-stack
      parameters:
        - description: can be the database ID or name
          in: path
          name: database
          required: true
          schema:
            description: can be the database ID or name
            type: string
        - explode: false
          in: query
          name: name
          required: true
          schema:
            minLength: 7
            type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stack"
          description: Created
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Create
      tags:
        - Stacks
  /databases/{database}/stacks/{stack}:
    delete:
      description: "`POP` operation on a stack."
      operationId: pop-stack
      parameters:
        - description: can be the database ID or name
          in: path
          name: database
          required: true
          schema:
            description: can be the database ID or name
            type: string
        - description: can be the stack ID or name
          in: path
          name: stack
          required: true
          schema:
            description: can be the stack ID or name
            type: string
        - $ref: '#/components/parameters/timeout'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PopDatabaseStackElementOutputBody"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Pop
      tags:
        - Stack Operations
    get:
      description: Show a stack of a database.
      operationId: get-stack
      parameters:
        - description: can be the database ID or name
          in: path
          name: database
          required: true
          schema:
            description: can be the database ID or name
            type: string
        - description: can be the stack ID or name
          in: path
          name: stack
          required: true
          schema:
            description: can be the stack ID or name
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stack"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Stack
      tags:
        - Stacks
    put:
      description: "`PUSH` operation on a stack."
      operationId: push-stack
      parameters:
        - description: can be the database ID or name
          in: path
          name: database
          required: true
          schema:
            description: can be the database ID or name
            type: string
        - description: can be the stack ID or name
          in: path
          name: stack
          required: true
          schema:
            description: can be the stack ID or name
            type: string
        - $ref: '#/components/parameters/timeout'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PushDatabaseStackElementInputBody"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StackElementBody"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Push
      tags:
        - Stack Operations
  /databases/{database}/stacks/{stack}/flush:
    delete:
      description: "`FLUSH` operation on a stack."
      operationId: flush-stack
      parameters:
        - description: can be the database ID or name
          in: path
          name: database
          required: true
          schema:
            description: can be the database ID or name
            type: string
        - description: can be the stack ID or name
          in: path
          name: stack
          required: true
          schema:
            description: can be the stack ID or name
            type: string
        - $ref: '#/components/parameters/timeout'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stack"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Flush
      tags:
        - Stack Operations
  /databases/{database}/stacks/{stack}/nuke:
    delete:
      description: Delete a stack from a database.
      operationId: delete-stack
      parameters:
        - description: can be the database ID or name
          in: path
          name: database
          required: true
          schema:
            description: can be the database ID or name
            type: string
        - description: can be the stack ID or name
          in: path
          name: stack
          required: true
          schema:
            description: can be the stack ID or name
            type: string
      responses:
        "204":
          description: No Content
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Delete
      tags:
        - Stacks
  /databases/{database}/stacks/{stack}/peek:
    get:
      description: "`PEEK` operation on a stack."
      operationId: peek-stack
      parameters:
        - description: can be the database ID or name
          in: path
          name: database
          required: true
          schema:
            description: can be the database ID or name
            type: string
        - description: can be the stack ID or name
          in: path
          name: stack
          required: true
          schema:
            description: can be the stack ID or name
            type: string
        - $ref: '#/components/parameters/timeout'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StackElementBody"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Peek
      tags:
        - Stack Operations
  /batch:
    post:
      description: Execute multiple stack operations in a single request.
      operationId: batch-operations
      parameters:
        - $ref: '#/components/parameters/timeout'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchOperationsInputBody"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchOperationsOutputBody"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Batch Operations
      tags:
        - Batch Operations
